require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe BriefsController do
  let(:rpm_org) { RpmOrg.create(:name=>'rpm') }
  let(:cheil_org) { rpm_org.create_cheil_org(:name=>'cheil')}
  let(:vendor_org) {VendorOrg.create(:name=>'vendor')}

  let(:rpm_org2) { RpmOrg.create(:name=>'rpm2') }
  let(:cheil_org2) {CheilOrg.create(:name=>'cheil2')}
  let(:vendor_org2) {VendorOrg.create(:name=>'vendor2')}

  let(:rpm_user) { rpm_org.users.create(:name=>'rpm_user',:password=>'123')}
  let(:cheil_user) { cheil_org.users.create(:name=>'cheil_user',:password=>'123')}
  let(:vendor_user) { vendor_org.users.create(:name=>'vendor_user',:password=>'123')}

  let(:rpm2_user) { rpm_org2.users.create(:name=>'rpm2_user',:password=>'123')}
  let(:cheil2_user) { cheil_org2.users.create(:name=>'cheil2_user',:password=>'123')}
  let(:vendor2_user) { vendor_org2.users.create(:name=>'vendor2_user',:password=>'123')}

  def set_current_user(user)
    session[:user_id] = user.id
  end

  describe "GET index" do
    describe "not login" do
      specify{
        get 'index'
        response.should redirect_to(new_session_path)
      }
    end

    describe "current user is a rpm_user" do
      specify{
        set_current_user(rpm_user)

        brief1 = rpm_org.briefs.create(:name=>'brief1')
        rpm_org2.briefs.create(:name=>'brief2')

        get 'index'
        assigns(:briefs).should eq([brief1])
      }
    end

    describe "current user is a cheil_user" do
      specify{
        set_current_user(cheil_user)

        brief1 = rpm_org.briefs.create(:name=>'brief1')

        get 'index'
        assigns(:briefs).should eq([])

        brief1.send_to_cheil!

        get 'index'
        assigns(:briefs).should eq([brief1])
      }
    end

    describe "current user is a vendor_user" do
      specify{
        set_current_user(vendor_user)

        brief1 = rpm_org.briefs.create(:name=>'brief1')
        get 'index'
        assigns(:briefs).should eq([])

        brief1.send_to_cheil!
        get 'index'
        assigns(:briefs).should eq([])

        brief1.vendor_solutions.create(:org_id=>vendor_user.org_id)
        get 'index'
        assigns(:briefs).should eq([brief1])
      }
    end

  end

  describe "GET show" do
    describe "current user is a rpm_user" do
      specify{
        set_current_user(rpm_user)
        brief1 = rpm_org.briefs.create(:name=>'brief1')
        get 'show',:id=>brief1.id
        assigns(:brief).should eq(brief1)
        response.should render_template('briefs/rpm/show')
      }

     specify{
        set_current_user(rpm2_user)
        brief1 = rpm_org.briefs.create(:name=>'brief1')
        expect { 
          get 'show',:id=>brief1.id
        }.to raise_exception(SecurityError)
      }
    end
  end

=begin
  describe "GET new" do
    it "assigns a new brief as @brief" do
      get :new
      assigns(:brief).should be_a_new(Brief)
    end
  end

  describe "GET edit" do
    it "assigns the requested brief as @brief" do
      brief = Brief.create! valid_attributes
      get :edit, :id => brief.id
      assigns(:brief).should eq(brief)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Brief" do
        expect {
          post :create, :brief => valid_attributes
        }.to change(Brief, :count).by(1)
      end

      it "assigns a newly created brief as @brief" do
        post :create, :brief => valid_attributes
        assigns(:brief).should be_a(Brief)
        assigns(:brief).should be_persisted
      end

      it "redirects to the created brief" do
        post :create, :brief => valid_attributes
        response.should redirect_to(Brief.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved brief as @brief" do
        # Trigger the behavior that occurs when invalid params are submitted
        Brief.any_instance.stub(:save).and_return(false)
        post :create, :brief => {}
        assigns(:brief).should be_a_new(Brief)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Brief.any_instance.stub(:save).and_return(false)
        post :create, :brief => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested brief" do
        brief = Brief.create! valid_attributes
        # Assuming there are no other briefs in the database, this
        # specifies that the Brief created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Brief.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => brief.id, :brief => {'these' => 'params'}
      end

      it "assigns the requested brief as @brief" do
        brief = Brief.create! valid_attributes
        put :update, :id => brief.id, :brief => valid_attributes
        assigns(:brief).should eq(brief)
      end

      it "redirects to the brief" do
        brief = Brief.create! valid_attributes
        put :update, :id => brief.id, :brief => valid_attributes
        response.should redirect_to(brief)
      end
    end

    describe "with invalid params" do
      it "assigns the brief as @brief" do
        brief = Brief.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Brief.any_instance.stub(:save).and_return(false)
        put :update, :id => brief.id, :brief => {}
        assigns(:brief).should eq(brief)
      end

      it "re-renders the 'edit' template" do
        brief = Brief.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Brief.any_instance.stub(:save).and_return(false)
        put :update, :id => brief.id, :brief => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested brief" do
      brief = Brief.create! valid_attributes
      expect {
        delete :destroy, :id => brief.id
      }.to change(Brief, :count).by(-1)
    end

    it "redirects to the briefs list" do
      brief = Brief.create! valid_attributes
      delete :destroy, :id => brief.id
      response.should redirect_to(briefs_url)
    end
  end
=end
end
